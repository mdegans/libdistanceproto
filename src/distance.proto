/* meta.proto
 *
 * Copyright 2020 Michael de Gans <47511965+mdegans@users.noreply.github.com>
 *
 * 2F05CE15DC6888FC6791B6C5BB9053FE34DD7560BBC894BF34DA0E9BC7CA4FF7
 * 6F45B57AACC5AF78EB1332486465EE58CB9EE463B31ABED1CAB14AFBE5532AD0
 *
 * This file is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

syntax = "proto3";

package distanceproto;

/**
 * Represents a batch of frames.
 */
message Batch {
  /**
   * The maximum number of frames in a batch.
   * (batch-size)
   */
  uint32 max_frames = 1;
  /**
   * The frames in this batch.
   */
  repeated Frame frames = 2;
}

/**
 * Represents a video frame.
 */
message Frame {
  /**
   * The video frame number.
   */
  int32 frame_num = 1;
  /**
   * The source id (eg. camera id).
   */
  uint32 source_id = 2;
  /**
   * People in this video frame.
   */
  repeated Person people = 3;
  /**
   * Sum of danger from all people.
   */
  float sum_danger = 4;
  /**
   * Frame dts timestamp, if any.
   * If deepstream, this is frame_meta.ntp_timestamp.
   * (in nanoseconds, like GstClockTime)
   */
  uint64 dts = 5;
  /**
   * Frame presentation timestamp, if any.
   * (in nanoseconds, like GstClockTime)
   */
  uint64 pts = 6;
}

/**
 * Represents a person in a video frame.
 */
message Person {
  /**
   * The unique id assigned by the tracker.
   */
  int32 uid = 1;
  /**
   * Whether this person's danger is > 1.0 (deprecated)
   */
  bool is_danger = 2;
  /**
   * The exact danger score of a person. It's easier to explain by example:
   *
   * a 6 foot person with another person standing 6 feet away has a score of 0.0
   *
   * a 6 foot person with another person standing 0 feet away has a score of 1.0
   *
   * (yes, I realise this isn't possible without explosions)
   *
   * a 6 foot person with another person standing 3 feet away has a score of 0.5
   *
   * a 6 foot person with **two people** standing 3 feet away has a score of 1.0
   *
   * a 6 foot person with *three people* standing 3 feet away has a score of 1.5
   *
   * ...and so on... it's a screen space Euclidean distance calculation where if
   * another person comes within the bounding box height's distance, that
   * normalized violation is added to this score. Using the bounding box height
   * isn't an exact science, but neither are other methods requiring complex
   * scene calibrations that only really work well on flat terrain. This works
   * out of the box and is fast AF.
   */
  float danger_val = 3;
  /**
   * The bounding box coordinates of this person.
   */
  BBox bbox = 4;
}

/**
 * Represents a bounding box.
 */
message BBox {
  /**
   * X origin of this box.
   */
  uint32 left = 1;
  /**
   * Y origin of this box.
   */
  uint32 top = 2;
  /**
   * Height of this box.
   */
  uint32 height = 3;
  /**
   * Width of this box.
   */
  uint32 width = 4;
}
